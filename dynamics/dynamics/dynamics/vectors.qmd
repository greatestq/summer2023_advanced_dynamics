[//]: # latex new commands
\newcommand\orig[2]{\mathbf{r}_{#1}^{(#2)}}
\newcommand\bvec[2]{{\mathbf{e}_{#1}^{(#2)}}}

# Kinematics: the description of motion
*Motivation* describe the motion of a particle or rigid body in 3D space.

```{tikz}
\begin{tikzpicture}
 \draw (0,0) circle (1cm);
 % \draw (0,0) circle (2cm);
\end{tikzpicture}
```


```{python}
# | echo: false
import matplotlib.pyplot as plt
import numpy as np

e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

ax = plt.figure().add_subplot(projection="3d")
ax.set_axis_off()

# Prepare arrays x, y, z
theta = np.linspace(0, 2 * np.pi, 100)
z = np.linspace(1.5, 2, 100)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)

p = [x[80], y[80], z[80]]

ax.plot(x, y, z)
ax.scatter(*p)
ax.quiver(*[0, 0, 0], *p, color="k", arrow_length_ratio=0.1)
ax.quiver(*[0, 0, 0], *e1, color="g", arrow_length_ratio=0.2)
ax.quiver(*[0, 0, 0], *e2, color="g", arrow_length_ratio=0.2)
ax.quiver(*[0, 0, 0], *e3, color="g", arrow_length_ratio=0.2)
ax.set_xlim([-4, 4])
ax.set_ylim([-4, 4])
ax.set_zlim([0, 4])
plt.show()
```



# Data for a three-dimensional line
zline = np.linspace(0, 15, 1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot3D(xline, yline, zline, 'gray')

## Reference frame
The geometry of motion is called kinematics. Motion is described with respect to a reference frame. A reference frame consists of a reference point called the origin and three directions called basis vectors. We consider two types of frames:
1. Inertial or fixed, and 
2. Body-fixed or moving.

::: {#def-frame}
## Reference frame
A reference frame is a set of basis vectors and an origin. We will always be using a set of three orthonormal basis vectors. Notation:
$$
(\bvec{1}{i}, \bvec{2}{i}, \bvec{3}{i}, \orig{A}{i}),
$$
:::
where $\bvec{j}{i}$, $j=1,2,3$ are the orthonormal basis vectors and $\orig{A}{i}$ is the origin, the superscript $i$ is a label to keep track of multiple reference frames. By convention $i=0$ is the fixed (inertial) frame.






@knuth84 for additional discussion of literate programming.

::: {.callout-tip}
## Tip with Title

This is an example of a callout with a title.
:::

See @def-frame.

```{python}
# | echo: false
import matplotlib.pyplot as plt
import numpy as np

e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])
p = np.array([1, 2, 4])

R = np.random.rand(3, 3)
U, S, V = np.linalg.svd(R)
r1 = U[:, 0]
r2 = U[:, 1]
r3 = np.cross(r1, r2)

print(np.linalg.norm(r1))
print(np.linalg.norm(r2))
print(np.linalg.norm(r3))


fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")

ax.text(1.1, 0, 0, r"$\mathbf{e}_1^{(0)}$")
ax.text(0, 1.1, 0, r"$\mathbf{e}_2^{(0)}$")
ax.text(0, 0, 1.1, r"$\mathbf{e}_3^{(0)}$")
#
ax.quiver(*p, *r1, color="r", arrow_length_ratio=0.2)
ax.quiver(*p, *r2, color="r", arrow_length_ratio=0.2)
ax.quiver(*p, *r3, color="r", arrow_length_ratio=0.2)
ax.text(*(1.1 * p), r"$\mathbf{e}_1^{(1)}$")
ax.text(0, 1.1, 0, r"$\mathbf{e}_2^{(0)}$")
ax.text(0, 0, 1.1, r"$\mathbf{e}_3^{(0)}$")
#
# ax.set_axis_off()
orig = [0, 0, 0]
ax.quiver(*orig, *e1, color="g", arrow_length_ratio=0.2)
ax.quiver(*orig, *e2, color="g", arrow_length_ratio=0.2)
ax.quiver(*orig, *e3, color="g", arrow_length_ratio=0.2)
ax.quiver(*orig, *p, color="b", arrow_length_ratio=0.1)

ax.set_xlim([-3, 6])
ax.set_ylim([-3, 6])
ax.set_zlim([-3, 6])
plt.show()
```

For example, see @fig-plot.

