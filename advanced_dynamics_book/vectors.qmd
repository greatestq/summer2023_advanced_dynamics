[//]: # latex new commands
\newcommand\orig[2]{\mathbf{r}_{#1}^{(#2)}}
\newcommand\bvec[2]{{\mathbf{e}_{#1}^{(#2)}}}
\newcommand\ddoubleunderline[1]{\underline{\underline{#1}}}

# Kinematics: the description of motion
*Motivation*: describe the motion of a particle or rigid body in 3D space.     

Kinematics is a fundamental branch of dynamics, focusing on the study of motion without considering the forces. It provides a framework for understanding and analyzing the motion of particles, objects, or systems in three-dimensional space. The motivation behind studying kinematics lies in its ability to describe and predtic motion, leading to applications in the controls or optimization of various systems. In Mechanical Engineering, the concepts play a crucial role in various fiels such as controls, robotics, biomechanics, and etc.




```{python}
#| echo: false
import matplotlib.pyplot as plt
import numpy as np
e1 = np.array([1,0,0])
e2 = np.array([0,1,0])
e3 = np.array([0,0,1])

ax = plt.figure().add_subplot(projection='3d')
ax.set_axis_off()

# Prepare arrays x, y, z
theta = np.linspace(0, 2 * np.pi, 100)
z = np.linspace(1.5,2, 100)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)

p = [x[80], y[80], z[80]]

ax.plot(x, y, z)
ax.scatter(*p)
ax.quiver(*[0, 0, 0], *p, color='k', arrow_length_ratio=0.1)
ax.quiver(*[0, 0, 0], *e1, color='g',
arrow_length_ratio=0.2)
ax.quiver(*[0, 0, 0], *e2, color='g',
arrow_length_ratio=0.2)
ax.quiver(*[0, 0, 0], *e3, color='g',arrow_length_ratio=0.2)
ax.set_xlim([-4, 4])
ax.set_ylim([-4, 4])
ax.set_zlim([0, 4])
plt.show()
```

## Introduction to Three Dimensional Linear Algebra
In the realm of practical applications and real-world scenarios, the study of motion necessitates a comprehensive understanding of three-dimensional space. As such, it becomes imperative to delve into the foundations of three-dimensional linear algebra. This branch of mathematics provides the tools and concepts needed to describe and analyze motion in a three-dimensional context. By grasping the principles of three-dimensional linear algebra, we gain the ability to navigate and comprehend the complexities inherent in the physical world, enabling us to formulate accurate models and predictions pertaining to dynamics. This foundational knowledge forms an integral part of any comprehensive dynamics book, allowing readers to unlock the fundamental principles underlying the motion of objects and systems in three-dimensional space.

### Reference frame
Motion is described with respect to a reference frame. A reference frame consists of a reference point called the origin and three orthonormal basis vectors. We consider two types of frames:

1. **Fixed frame**, also known as an inertial frame, is a reference frame that remains stationary or moves with a constant velocity relative to an external observer or a point of reference. In a fixed frame, Newton's laws of motion hold true, and the laws of physics are considered to be the same regardless of the frame's position or orientation.

2. **Moving frame**, also known as a non-inertial frame or body-fixed, is a reference frame that is accelerating, rotating, or undergoing any other type of non-uniform motion relative to a fixed reference frame. In a moving frame, the laws of motion are not as straightforward, since additional forces may come into play due to the frame's acceleration or rotation.


::: {#def-frame}
### Reference frame
A reference frame is a set of basis vectors and an origin. We will always be using a set of three orthonormal basis vectors. Notation:
$$
(\bvec{1}{i}, \bvec{2}{i}, \bvec{3}{i}, \orig{A}{i}),
$$
or to be concise 
$$
(\bvec{1}{i}, \bvec{2}{i}, \bvec{3}{i})
$$
:::
where $\bvec{j}{i}$, $j=1,2,3$ are the orthonormal basis vectors and $\orig{A}{i}$ is the origin, the superscript $i$ is a label to keep track of multiple reference frames. By convention $i=0$ is the fixed (inertial) frame.

Some of the special properties of the orthonormal basis vectors are that 
$$
\textbf{e}_{i} \cdot \textbf{e}_{j} = \delta_{ij} 
$$
where $i,j=1,2,3$ 

and

$$
\textbf{e}_1 \times \textbf{e}_2 = \textbf{e}_3
$$
$$
\textbf{e}_2 \times \textbf{e}_3 = \textbf{e}_1
$$
$$
\textbf{e}_3 \times \textbf{e}_1 = \textbf{e}_2
$$
These two properties are invariant of whichever frame one uses ("superscript-independent") as long as the three basis vectors are orthonormal. 

### Vectors and Cross Product
In the context of kinematics, a vector contains information about the relative position and direction. A single vector can be expressed in infinitely many different ways depending on the choice of a reference frame. In other words, "coordinates" are "frame-dependent". 

Suppose we have a three dimensional vector $\textbf{r}$ and a reference frame located at some arbitary origin $\textbf{O}$ with three orthonormal basis vectors $\bvec{1}{0}, \bvec{2}{0}, \bvec{3}{0}$. Then the vector $\textbf{r}$ can be expressed as following
$$
\textbf{r} = r_1\bvec{1}{0} + r_2\bvec{2}{0} + r_3\bvec{3}{0} = \begin{pmatrix} \bvec{1}{0} & \bvec{2}{0} & \bvec{3}{0} \end{pmatrix} \begin{pmatrix} r_1 \\ r_2 \\ r_3 \end{pmatrix}
$$
where $r_1, r_2, r_3$ are the "coordinates". However, these "coordinates" need not be the same in other reference frames. 

One of the most frequently used vector products in Dynamics is the cross product. Suppose we have some arbitary vectors $\textbf{u}$ and $\textbf{v}$ both expressed with respect to the same reference frame.
$$
\textbf{u} = \Sigma_{i=1}^{3}u_i\textbf{e}_i
$$
$$
\textbf{v} = \Sigma_{j=1}^{3}v_j\textbf{e}_j
$$
Then the cross product between the two vectors proceed as follows
$$
\textbf{u} \times \textbf{v} = (u_1\textbf{e}_1 + u_2\textbf{e}_2 + u_3\textbf{e}_3) \times (v_1\textbf{e}_1 + v_2\textbf{e}_2 + v_3\textbf{e}_3)
$$
$$
= (u_2v_3-u_3v_2)\textbf{e}_1+(u_3v_1-u_1v_3)\textbf{e}_2 + (u_1v_2 - u_2v_1)\textbf{e}_3
$$
$$
= \begin{pmatrix} \textbf{e}_1 & \textbf{e}_2 & \textbf{e}_3 \end{pmatrix} \begin{pmatrix} u_2v_3 - u_3v_2 \\ u_3v_1 - u_1v_3 \\ u_1v_2 - u_2v_1 \end{pmatrix} 
$$
$$
= \begin{pmatrix} \textbf{e}_1 & \textbf{e}_2 & \textbf{e}_3 \end{pmatrix} \begin{pmatrix} 0 & -u_3 & u_2 \\ u_3 & 0 & -u_1 \\ -u_2 & u_1 & 0 \end{pmatrix} \begin{pmatrix} v_1 \\ v_2 \\ v_3 \end{pmatrix}
$$

Notice that the matrix containing the components of the $\textbf{u}$ is skew-symmetric. In other words, a cross product operation can be seen equivalent to a left matrix multiplication of a skew-symmetric matrix. This is a key result that will be frequently used in subsequent chapters. Hereafter, we denote skew symmetric matrices with a tilde symbol and note that the transpose of a skew symmetric matrix is precisely the negative of itself. 
$$
\widetilde{\textbf{u}} = \begin{pmatrix} 0 & -u_3 & u_2 \\ u_3 & 0 & -u_1 \\ -u_2 & u_1 & 0\end{pmatrix} 
$$
$$
\widetilde{\textbf{u}}^T = -\widetilde{\textbf{u}}
$$

### Rotation Matrices
::: {#def-Rmatrix}
### Rotation Matrix
A rotation matrix is a tool used to describe the transformation between different reference frames. It allows us to convert the coordinates of a point or a vector from one reference frame to another. 

Consider two reference frames: Frame A and Frame B. The rotation matrix, denoted as $\textbf{R}^{(a,b)}$, represents the rotational transformation from Frame A to Frame B. 

Based on the notation that we are using, the rotation matrix from Frame B to Frame A would be written as $\textbf{R}^{(b,a)}$.  
:::
$$
(\bvec{1}{b} \bvec{2}{b} \bvec{3}{b}) = (\bvec{1}{a} \bvec{2}{a} \bvec{3}{a}) \textbf{R}^{(a,b)}
$$
or in more compact notation,
$$
\ddoubleunderline{\textbf{e}}^{(b)} = \ddoubleunderline{\textbf{e}}^{(a)}\textbf{R}^{(a,b)} 
$$
where the double-underline notation indicates a reference frame matrix. 

In this course, all our reference frames consist of orthonormal basis vectors. In other words, the reference frame matrices are orthogonal. Furthermore, 3 dimensional rotation matrices is an element of the SO(3). This leads us to another useful property that we will frequently make use of in subsequent chapters: 
$$
(\textbf{R}^{(a,b)})^{-1} = (\textbf{R}^{(a,b)})^T
$$


@knuth84 for additional discussion of literate programming.


::: {.callout-tip}
## Tip with Title

This is an example of a callout with a title.
:::

See @def-frame.

```{python}
#| echo: false
import matplotlib.pyplot as plt
import numpy as np
e1 = np.array([1,0,0])
e2 = np.array([0,1,0])
e3 = np.array([0,0,1])
p = np.array([1, 2, 4])

R = np.random.rand(3,3)
U, S, V = np.linalg.svd(R)
r1 = U[:,0]
r2 = U[:,1]
r3 = np.cross(r1, r2)

print(np.linalg.norm(r1))
print(np.linalg.norm(r2))
print(np.linalg.norm(r3))


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.text(1.1, 0, 0, r'$\mathbf{e}_1^{(0)}$')
ax.text(0, 1.1, 0, r'$\mathbf{e}_2^{(0)}$')
ax.text(0, 0, 1.1, r'$\mathbf{e}_3^{(0)}$')
#
ax.quiver(*p, *r1, color='r',
arrow_length_ratio=0.2)
ax.quiver(*p, *r2, color='r',
arrow_length_ratio=0.2)
ax.quiver(*p, *r3, color='r',arrow_length_ratio=0.2)
ax.text(*(1.1*p), r'$\mathbf{e}_1^{(1)}$')
ax.text(0, 1.1, 0, r'$\mathbf{e}_2^{(0)}$')
ax.text(0, 0, 1.1, r'$\mathbf{e}_3^{(0)}$')
#
#ax.set_axis_off()
orig = [0, 0, 0]
ax.quiver(*orig, *e1, color='g',
arrow_length_ratio=0.2)
ax.quiver(*orig, *e2, color='g',
arrow_length_ratio=0.2)
ax.quiver(*orig, *e3, color='g',arrow_length_ratio=0.2)
ax.quiver(*orig, *p, color='b',arrow_length_ratio=0.1)

ax.set_xlim([-3, 6])
ax.set_ylim([-3, 6])
ax.set_zlim([-3, 6])
plt.show()
```

For example, see @fig-plot.

